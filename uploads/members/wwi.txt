

@loginbp.route('/logout', methods=['GET','POST'])
def logout():
    if 'user' in session:
        print("logout user")
        session.pop('user')
    return redirect(url_for('home'))

@loginbp.route('/signup', methods=['POST', 'GET'])
def signup():
    if request.method == 'POST':

        fullname = request.form['full_name']
        email = request.form['email']
        std_id = request.form['student_id']
        password = request.form['password']
        confirmpassword = request.form['confirm_password']

        #hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

        find_acc = db_account.find_one({'email': email, 'std_id': std_id})

        if find_acc:
            print('email already exist')
            return render_template("signup.html")
        
        if password != confirmpassword: 
            print("Passwords do not match")
            return render_template("signup.html")
        
        otp = ''.join([str(random.randint(0, 9)) for _ in range(6)])   
        print(otp)
        session['pending_user'] = {
            'fullname': fullname,
            'email': email,
            'password':  password,
            'std_id': std_id,
            'otp': otp
        }

        send_otp_email(email, otp)   
        return redirect(url_for('login.otp_verificaiton'))  
    return render_template('signup.html')


def send_otp_email(to_email, otp):
    msg = EmailMessage()
    msg['Subject'] = 'Proware OTP verification'
    msg['From'] = current_app.config['EMAIL_USER']
    msg['To'] = to_email
    msg.set_content(f'Your One Time Password(OTP) is: {otp}')


    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.starttls()
        server.login(current_app.config['EMAIL_USER'], current_app.config['EMAIL_PASSWORD'])
        server.send_message(msg)

@loginbp.route('/otp_verify', methods=['GET', 'POST'])
def otp_verificaiton():
    if request.method == 'POST':
        user_otp = request.form['otp_verification']
        pending_user = session.get('pending_user')

        if pending_user and user_otp == pending_user['otp']:
            # insert into db
            db_account.insert_one({
                'name': pending_user['fullname'],
                'std_id': pending_user['std_id'],
                'email': pending_user['email'],
                'password': pending_user['password']     
            })
            session.pop('pending_user')  
            return redirect(url_for('home'))
        else:
            print('invalid otp')
            return render_template('otp_verify.html')

    return render_template('otp_verify.html')

